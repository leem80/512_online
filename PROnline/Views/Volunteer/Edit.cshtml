@model PROnline.Models.Users.Volunteer
@{
    ViewBag.Title = "编辑志愿者";
    Layout = "~/Views/Shared/Space/_Edit.cshtml";
}

@section head{
    <script type="text/javascript">
        function Week(str) {
            var time = document.getElementById("time");
            time.length = 0;
            if (str == "星期一" || str == "星期二" || str == "星期三" || str == "星期四" || str == "星期五") {
                time.options.add(new Option("19点-21点", "19"));
                time.options.add(new Option("21点-23点", "21"));
            }
            else if (str == "星期六" || str == "星期日") {
                time.options.add(new Option("09点-11点", "9"));
                time.options.add(new Option("14点-16点", "14"));
                time.options.add(new Option("16点-18点", "16"));
                time.options.add(new Option("19点-21点", "19"));
                time.options.add(new Option("21点-23点", "21"));
            }
        }
    </script> 
}

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Volunteer</legend>
        @Html.HiddenFor(model => model.VolunteerID)
        @Html.HiddenFor(model => model.User.Id)
        <div class="editor-label">
            @Html.LabelFor(model => model.User.RealName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.User.RealName)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Sex)
        </div>
        <div class="editor-field">
            @Html.DropDownList("Sex", new SelectList(new List<String> { "男", "女" }))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Birthday)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Birthday)
            <script type="text/javascript">
                $("#Birthday").attr("readonly", "readonly")
            </script>
            @Tools.DateBox("Birthday")
            @Html.ValidationMessageFor(model => model.Birthday)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Nationality)
        </div>
        <div class="editor-field">
            @Html.DropDownList("Nationality", new SelectList(new List<String> { "汉族", "壮族", "满族", "回族", "苗族", "维吾尔族", "土家族", "彝族", "蒙古族", "藏族", "布依族", "侗族", "瑶族", "朝鲜族", "白族", "哈尼族", "哈萨克族", "黎族", "傣族", "畲族", "傈僳族", "仡佬族", "东乡族", "拉祜族", "水族", "佤族", "纳西族", "羌族", "土族" }))
            @Html.ValidationMessageFor(model => model.Nationality)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.DayOfWeek)
        </div>
        <div class="editor-field">
            <select name="DayOfWeek" id="week" onchange="Week(this.value)" >
            @{
    String[] w = { "星期一", "星期二", "星期三", "星期四", "星期五", "星期六", "星期日" };
    foreach (String s in w)
    {
        if (s == Model.DayOfWeek)
        {
                        <option value="@s" selected="selected">@s</option>
        }
        else
        {
                        <option value="@s">@s</option>
        }
    }           
            } 
            </select>
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Time)
        </div>
        <div class="editor-field">
            <select name="Time" id="time">
            @{
    if (Model.DayOfWeek == "星期六" || Model.DayOfWeek == "星期日")
    {
        String[] t = { "09点-11点", "14点-16点", "16点-18点", "19点-21点", "21点-23点" };
        String[] v = { "9", "14", "16", "19", "21" };
        int i = 0;
        for (i = 0; i < 5; i++)
        {
            if (v[i] == Model.Time)
            {
                            <option value="@v[i]" selected="selected">@t[i]</option>
            }
            else
            {
                            <option value="@v[i]">@t[i]</option>
            }
        }
    }
    else
    {
        if (Model.Time == "19")
        {
                        <option value="19" selected="selected">19点-21点</option>
                        <option value="21">21点-23点</option>
        }
        else if (Model.Time == "21")
        {
                        <option value="19">19点-21点</option>
                        <option value="21" selected="selected">21点-23点</option>
        }
    }
            }
            </select>
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.HomeTown)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.HomeTown)
            @Html.ValidationMessageFor(model => model.HomeTown)
        </div>
        
        <div class="editor-label">
            @Html.LabelFor(model => model.PoliticalExperience)
        </div>
        <div class="editor-field">
            @Html.DropDownList("PoliticalExperience", new SelectList(new List<String> { "团员", "党员", "群众" }))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Telepone)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Telepone)
            @Html.ValidationMessageFor(model => model.Telepone)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.MobileTelephone)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.MobileTelephone)
            @Html.ValidationMessageFor(model => model.MobileTelephone)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.EMail)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.EMail)
            @Html.ValidationMessageFor(model => model.EMail)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.QQ)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.QQ)
            @Html.ValidationMessageFor(model => model.QQ)
        </div>
        <!--div class="editor-label">
            @Html.LabelFor(model => model.TrainingType)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.TrainingType)
            @Html.ValidationMessageFor(model => model.TrainingType)
        </div-->
        <div class="editor-label">
            @Html.LabelFor(model => model.IsStudent)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.IsStudent)
            @Html.ValidationMessageFor(model => model.IsStudent)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.University)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.University)
            @Html.ValidationMessageFor(model => model.University)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Degree)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Degree)
            @Html.ValidationMessageFor(model => model.Degree)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Major)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Major)
            @Html.ValidationMessageFor(model => model.Major)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Grade)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Grade)
            @Html.ValidationMessageFor(model => model.Grade)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Career)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Career)
            @Html.ValidationMessageFor(model => model.Career)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.IsExperenced)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.IsExperenced)
            @Html.ValidationMessageFor(model => model.IsExperenced)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Experence)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.Experence)
            @Html.ValidationMessageFor(model => model.Experence)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Introduction)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.Introduction)
            @Html.ValidationMessageFor(model => model.Introduction)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Motive)
        </div>
        <div class="editor-field">
            @{
                <p>
                    @Html.RadioButton("Motive", "为灾区奉献爱心")
                    <span>为灾区奉献爱心</span>
                </p>
                <p>
                    @Html.RadioButton("Motive", "学习心理学及相关知识")
                    <span>学习心理学及相关知识</span>
                </p>
                <p>
                    @Html.RadioButton("Motive", "参加社会活动，增加社会阅历")
                    <span>参加社会活动，增加社会阅历</span>
                </p>
                <p>
                    @Html.RadioButton("Motive", "对自我的锻炼成长")
                    <span>对自我的锻炼成长</span>
                </p>
                <p>
                    @Html.RadioButton("Motive", "拓展人际关系，提高社交能力")
                    <span>拓展人际关系，提高社交能力</span>
                </p>
                <p>
                    @Html.RadioButton("Motive", "提高专业能力")
                    <span>提高专业能力</span>
                </p>
                <p>
                    @Html.RadioButton("Motive", "提高组织策划能力")
                    <span>提高组织策划能力</span>
                </p>
                <p>
                    @Html.RadioButton("Motive", "其他")
                    <span>其他</span>
                </p>
            }
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Motto)
        </div>
        <div class="editor-field">
            @{
    List<SelectListItem> mottoItems = new List<SelectListItem>();
    mottoItems.Add(new SelectListItem { Text = "不做后悔的事，做了就不后悔。", Value = "不做后悔的事，做了就不后悔。" });
    mottoItems.Add(new SelectListItem { Text = "哭着流泪是怯懦的宣泄,笑着流泪是勇敢的宣言。", Value = "哭着流泪是怯懦的宣泄,笑着流泪是勇敢的宣言。" });
    mottoItems.Add(new SelectListItem { Text = "每天给从自己身边走过的人一个微笑，你的世界将灿烂如花。", Value = "每天给从自己身边走过的人一个微笑，你的世界将灿烂如花。" });
    mottoItems.Add(new SelectListItem { Text = "拼尽全力，看看自己究竟能走多远！", Value = "拼尽全力，看看自己究竟能走多远！" });
    mottoItems.Add(new SelectListItem { Text = "用真诚的行动传播爱的芬芳,让我们的身边充满阳光。", Value = "用真诚的行动传播爱的芬芳,让我们的身边充满阳光。" });
    mottoItems.Add(new SelectListItem { Text = "世界上没有绝望的处境，只有对处境绝望的人。", Value = "世界上没有绝望的处境，只有对处境绝望的人。" });
    mottoItems.Add(new SelectListItem { Text = "如果要飞得高，就要把地平线忘掉。", Value = "如果要飞得高，就要把地平线忘掉。" });
    mottoItems.Add(new SelectListItem { Text = "一步一个脚印的攀登，才能找到最美丽的风景！", Value = "一步一个脚印的攀登，才能找到最美丽的风景！" });
    mottoItems.Add(new SelectListItem { Text = "接受我们不能改变的一切，改变我们能改变的一切。", Value = "接受我们不能改变的一切，改变我们能改变的一切。" });
    mottoItems.Add(new SelectListItem { Text = "贫穷的人有的只是一种情绪。", Value = "贫穷的人有的只是一种情绪。" });                                                                              
                @Html.DropDownList("Motto", mottoItems as IEnumerable<SelectListItem>)
            }
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.GoodAtField)
        </div>
        <div class="editor-field">
            @{
    List<SelectListItem> GoodAtFieldItems = new List<SelectListItem>();
    GoodAtFieldItems.Add(new SelectListItem { Text = "社会学", Value = "社会学" });
    GoodAtFieldItems.Add(new SelectListItem { Text = "心理学", Value = "心理学" });
    GoodAtFieldItems.Add(new SelectListItem { Text = "教育学", Value = "教育学" });
    GoodAtFieldItems.Add(new SelectListItem { Text = "医学", Value = "医学" });
    GoodAtFieldItems.Add(new SelectListItem { Text = "物理", Value = "物理" });
    GoodAtFieldItems.Add(new SelectListItem { Text = "化学", Value = "化学" });
    GoodAtFieldItems.Add(new SelectListItem { Text = "英语", Value = "英语" });
    GoodAtFieldItems.Add(new SelectListItem { Text = "计算机", Value = "计算机" });
    GoodAtFieldItems.Add(new SelectListItem { Text = "生物", Value = "生物" });
    GoodAtFieldItems.Add(new SelectListItem { Text = "地理", Value = "地理" });
    GoodAtFieldItems.Add(new SelectListItem { Text = "历史", Value = "历史" });
    GoodAtFieldItems.Add(new SelectListItem { Text = "数学", Value = "数学" });
    GoodAtFieldItems.Add(new SelectListItem { Text = "其它", Value = "其它" });                                                                               
                @Html.DropDownList("GoodAtField", GoodAtFieldItems as IEnumerable<SelectListItem>)
            }
        </div>
        <p class="btn">
            <input type="submit" value="保存" />| 
            <a href="@Request.UrlReferrer">返回</a>
        </p>
    </fieldset>
}
